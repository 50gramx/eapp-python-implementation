# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ethos.elint.entities import generic_pb2 as ethos_dot_elint_dot_entities_dot_generic__pb2
from ethos.elint.services.product.identity.universe import access_universe_pb2 as ethos_dot_elint_dot_services_dot_product_dot_identity_dot_universe_dot_access__universe__pb2


class AccessUniverseServiceStub(object):
    """we may need some kind of portal, where we can manage the access persona for taking access of this entities
    for example, each Universe can be accessed by one-core developer or not,
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UniverseAccessToken = channel.unary_unary(
                '/elint.services.product.identity.universe.AccessUniverseService/UniverseAccessToken',
                request_serializer=ethos_dot_elint_dot_services_dot_product_dot_identity_dot_universe_dot_access__universe__pb2.UniverseAccessTokenRequest.SerializeToString,
                response_deserializer=ethos_dot_elint_dot_services_dot_product_dot_identity_dot_universe_dot_access__universe__pb2.UniverseAccessTokenResponse.FromString,
                )
        self.ValidateUniverseServices = channel.unary_unary(
                '/elint.services.product.identity.universe.AccessUniverseService/ValidateUniverseServices',
                request_serializer=ethos_dot_elint_dot_services_dot_product_dot_identity_dot_universe_dot_access__universe__pb2.UniverseServicesAccessAuthDetails.SerializeToString,
                response_deserializer=ethos_dot_elint_dot_entities_dot_generic__pb2.ResponseMeta.FromString,
                )


class AccessUniverseServiceServicer(object):
    """we may need some kind of portal, where we can manage the access persona for taking access of this entities
    for example, each Universe can be accessed by one-core developer or not,
    """

    def UniverseAccessToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateUniverseServices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccessUniverseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UniverseAccessToken': grpc.unary_unary_rpc_method_handler(
                    servicer.UniverseAccessToken,
                    request_deserializer=ethos_dot_elint_dot_services_dot_product_dot_identity_dot_universe_dot_access__universe__pb2.UniverseAccessTokenRequest.FromString,
                    response_serializer=ethos_dot_elint_dot_services_dot_product_dot_identity_dot_universe_dot_access__universe__pb2.UniverseAccessTokenResponse.SerializeToString,
            ),
            'ValidateUniverseServices': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateUniverseServices,
                    request_deserializer=ethos_dot_elint_dot_services_dot_product_dot_identity_dot_universe_dot_access__universe__pb2.UniverseServicesAccessAuthDetails.FromString,
                    response_serializer=ethos_dot_elint_dot_entities_dot_generic__pb2.ResponseMeta.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'elint.services.product.identity.universe.AccessUniverseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AccessUniverseService(object):
    """we may need some kind of portal, where we can manage the access persona for taking access of this entities
    for example, each Universe can be accessed by one-core developer or not,
    """

    @staticmethod
    def UniverseAccessToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/elint.services.product.identity.universe.AccessUniverseService/UniverseAccessToken',
            ethos_dot_elint_dot_services_dot_product_dot_identity_dot_universe_dot_access__universe__pb2.UniverseAccessTokenRequest.SerializeToString,
            ethos_dot_elint_dot_services_dot_product_dot_identity_dot_universe_dot_access__universe__pb2.UniverseAccessTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateUniverseServices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/elint.services.product.identity.universe.AccessUniverseService/ValidateUniverseServices',
            ethos_dot_elint_dot_services_dot_product_dot_identity_dot_universe_dot_access__universe__pb2.UniverseServicesAccessAuthDetails.SerializeToString,
            ethos_dot_elint_dot_entities_dot_generic__pb2.ResponseMeta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
